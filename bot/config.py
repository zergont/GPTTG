"""–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
from dataclasses import dataclass
import os
import sys
import platform
import re
from pathlib import Path

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—É
PLATFORM = platform.system().lower()
IS_WINDOWS = PLATFORM == 'windows'
IS_LINUX = PLATFORM == 'linux'
IS_DEVELOPMENT = os.path.exists('.git') and not os.path.exists('/etc/systemd')

def get_version_from_pyproject():
    """–ß–∏—Ç–∞–µ—Ç –≤–µ—Ä—Å–∏—é –∏–∑ pyproject.toml –±–µ–∑ toml –ø–∞–∫–µ—Ç–∞."""
    pyproject_path = Path(__file__).parent.parent / "pyproject.toml"
    if not pyproject_path.exists():
        return "unknown"
    
    try:
        content = pyproject_path.read_text(encoding='utf-8')
        match = re.search(r'version\s*=\s*"([^"]+)"', content)
        return match.group(1) if match else "unknown"
    except Exception:
        return "unknown"

# –ü–æ–ª—É—á–∞–µ–º –≤–µ—Ä—Å–∏—é —Å—Ä–∞–∑—É
VERSION = get_version_from_pyproject()

@dataclass(frozen=True, slots=True)
class Settings:
    bot_token: str
    openai_api_key: str
    admin_id: int
    system_prompt: str
    openai_price_per_1k_tokens: float
    whisper_price: float
    dalle_price: float
    max_file_mb: int
    debug_mode: bool
    # –ü–ª–∞—Ç—Ñ–æ—Ä–º–æ-–∑–∞–≤–∏—Å–∏–º—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    platform: str
    is_windows: bool
    is_linux: bool
    is_development: bool

def create_settings():
    """–°–æ–∑–¥–∞–µ—Ç –æ–±—ä–µ–∫—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π."""
    
    platform_info = f" ({PLATFORM}{'|dev' if IS_DEVELOPMENT else '|prod'})"
    print(f"GPTTG Telegram Bot v{VERSION}{platform_info}")

    # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–∞–∫–µ—Ç–æ–≤ ---
    REQUIRED_PACKAGES = [
        "aiogram",
        "aiohttp", 
        "openai",
        "backoff",
        "python_dotenv",
        "aiosqlite",
        "pytz",
        # "toml",  # –£–¥–∞–ª–µ–Ω–æ - –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–æ
    ]

    def check_packages():
        print("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–∞–∫–µ—Ç–æ–≤:")
        errors = []
        for pkg in REQUIRED_PACKAGES:
            try:
                if pkg == "python_dotenv":
                    __import__("dotenv")
                else:
                    __import__(pkg)
                print(f"‚úÖ {pkg} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            except ImportError:
                print(f"‚ùå {pkg} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                errors.append(pkg)
        return errors

    package_errors = check_packages()
    if package_errors:
        print(f"\n‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞–∫–µ—Ç—ã: {', '.join(package_errors)}")
        print("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ–¥–Ω—É –∏–∑ –∫–æ–º–∞–Ω–¥:")
        if IS_WINDOWS:
            print("   poetry install")
            print("   pip install " + " ".join(package_errors))
        else:
            print("   poetry install")
            print("   python3 -m pip install " + " ".join(package_errors))
        sys.exit(1)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ .env
    env_path = Path('.') / '.env'
    if not env_path.exists():
        print("‚ö†Ô∏è  –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞!")
        if IS_DEVELOPMENT:
            print("üí° –°–æ–∑–¥–∞–π—Ç–µ .env —Ñ–∞–π–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ .env.example")
    else:
        print("‚úÖ –§–∞–π–ª .env –Ω–∞–π–¥–µ–Ω.")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env
    try:
        from dotenv import load_dotenv
        load_dotenv(dotenv_path=env_path)
        print("‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
    except ImportError:
        print("‚ö†Ô∏è  –ú–æ–¥—É–ª—å python-dotenv –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env –Ω–µ –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
        sys.exit(1)

    def _env(name: str, default: str | None = None, env_dict: dict | None = None) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –±—Ä–æ—Å–∞–µ—Ç –æ—à–∏–±–∫—É."""
        if env_dict is not None and name in env_dict:
            val = env_dict[name]
        else:
            val = os.getenv(name, default)
        if val is None:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å—á–∏—Ç–∞—Ç—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é {name}")
            raise RuntimeError(f"–ù–µ –∑–∞–¥–∞–Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è {name}")
        # –ù–µ –≤—ã–≤–æ–¥–∏–º –∑–Ω–∞—á–µ–Ω–∏—è –∫–ª—é—á–µ–π
        if name.lower() in {"bot_token", "openai_api_key"}:
            print(f"‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è {name} —É—Å–ø–µ—à–Ω–æ —Å—á–∏—Ç–∞–Ω–∞ (—Å–∫—Ä—ã—Ç–æ)")
        else:
            print(f"‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è {name} = {val}")
        return val

    # --- –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
    REQUIRED_ENV_VARS = [
        "BOT_TOKEN",
        "OPENAI_API_KEY", 
        "ADMIN_ID",
    ]
    OPTIONAL_ENV_VARS = [
        ("SYSTEM_PROMPT", "–¢—ã ‚Äî –ø–æ–ª–µ–∑–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –£ —Ç–µ–±—è –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ç–µ–∫—É—â–µ–º—É –≤—Ä–µ–º–µ–Ω–∏ –∏ –¥–∞—Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –≤ –∫–∞–∂–¥–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."),
        ("OPENAI_PRICE_PER_1K_TOKENS", "0.002"),
        ("WHISPER_PRICE", "0.006"),
        ("DALLE_PRICE", "0.040"),
        ("MAX_FILE_MB", "20"),
        ("DEBUG_MODE", "1" if IS_DEVELOPMENT else "0"),  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–∫–ª—é—á–∞–µ–º debug –≤ dev
    ]

    env_values = {}
    env_errors = []
    for var in REQUIRED_ENV_VARS:
        try:
            env_values[var] = _env(var)
        except RuntimeError:
            env_errors.append(var)
    for var, default in OPTIONAL_ENV_VARS:
        try:
            env_values[var] = _env(var, default)
        except RuntimeError:
            env_values[var] = default
    if env_errors:
        print(f"\n‚ùå –ù–µ –∑–∞–¥–∞–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(env_errors)}")
        sys.exit(1)

    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫
    return Settings(
        bot_token=env_values["BOT_TOKEN"],
        openai_api_key=env_values["OPENAI_API_KEY"],
        admin_id=int(env_values["ADMIN_ID"]),
        system_prompt=env_values["SYSTEM_PROMPT"],
        openai_price_per_1k_tokens=float(env_values["OPENAI_PRICE_PER_1K_TOKENS"]),
        whisper_price=float(env_values["WHISPER_PRICE"]),
        dalle_price=float(env_values["DALLE_PRICE"]),
        max_file_mb=int(env_values["MAX_FILE_MB"]),
        debug_mode=bool(int(env_values["DEBUG_MODE"])),
        # –ü–ª–∞—Ç—Ñ–æ—Ä–º–æ-–∑–∞–≤–∏—Å–∏–º—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        platform=PLATFORM,
        is_windows=IS_WINDOWS,
        is_linux=IS_LINUX,
        is_development=IS_DEVELOPMENT
    )

# –°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è
settings = create_settings()