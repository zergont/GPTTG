"""–ß–∞—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º OpenAI Responses API."""
from typing import Any, Dict, List
import re
import json
from datetime import datetime, timezone, timedelta
import openai

from bot.config import settings
from bot.utils.db import get_conn
from bot.utils.log import logger
from .base import client, oai_limiter
from .models import ModelsManager


class ChatManager:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–æ–º —á–µ—Ä–µ–∑ OpenAI Responses API."""

    # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –∑–∞–∫—Ä—ã—Ç–∏–µ –±–ª–æ–∫–æ–≤ —Ç—Ä–µ–º—è –∏–ª–∏ —á–µ—Ç—ã—Ä—å–º—è –±—ç–∫—Ç–∏–∫–∞–º–∏ (–º–æ–¥–µ–ª—å –∏–Ω–æ–≥–¥–∞ –∫–æ–ø–∏—Ä—É–µ—Ç –ø—Ä–∏–º–µ—Ä –±—É–∫–≤–∞–ª—å–Ω–æ)
    REMINDER_FENCE_RE = re.compile(r"```\s*reminder\s*\n([\s\S]*?)\n```+", re.IGNORECASE)

    @staticmethod
    async def responses_request(
        chat_id: int,
        user_id: int,
        user_content: List[Dict[str, Any]],
        previous_response_id: str | None = None,
        tools: list | None = None,
        enable_web_search: bool | None = None,
        tool_choice: str | None = None
    ) -> str:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –≤ OpenAI Responses API.

        Args:
            chat_id: ID —á–∞—Ç–∞.
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏).
            user_content: –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.
            previous_response_id: ID –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞ (–¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞).
            tools: –°–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤.
            enable_web_search: –í–∫–ª—é—á–∏—Ç—å web_search tool.
            tool_choice: –í—ã–±–æ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ (auto/none/required).

        Returns:
            str: –û—Ç–≤–µ—Ç –æ—Ç OpenAI.
        –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å–∫—Ä—ã—Ç—ã–π –±–ª–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –∫–æ–Ω—Ü–µ –æ—Ç–≤–µ—Ç–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ —Å —Ñ–æ—Ä–º–∞—Ç–æ–º:
        ```reminder
        {"when": "in 5m" | ISO8601, "text": "...", "silent": false}
        ```
        –ë–ª–æ–∫ —É–¥–∞–ª—è–µ—Ç—Å—è –∏–∑ –≤–∏–¥–∏–º–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ –ë–î.
        """
        async with oai_limiter(chat_id):
            logger.info("–ó–∞–ø—Ä–æ—Å –≤ OpenAI (chat=%s, prev=%s)", chat_id, previous_response_id)

            current_model = await ModelsManager.get_current_model()

            if previous_response_id is None:
                async with get_conn() as db:
                    cur = await db.execute(
                        "SELECT last_response FROM chat_history WHERE chat_id = ?",
                        (chat_id,)
                    )
                    row = await cur.fetchone()
                    previous_response_id = row[0] if row else None

            input_content: List[Dict[str, Any]] = []

            # –ë–∞–∑–æ–≤—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º
            reminder_instr = (
                "\n\n–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º (–±–µ–∑ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤):\n"
                "‚Ä¢ –ï—Å–ª–∏ —É–º–µ—Å—Ç–Ω–æ –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç, –≤ –∫–æ–Ω—Ü–µ –æ—Ç–≤–µ—Ç–∞ –¥–æ–±–∞–≤—å –æ–¥–∏–Ω —Å–∫—Ä—ã—Ç—ã–π –±–ª–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.\n"
                "‚Ä¢ –§–æ—Ä–º–∞—Ç: —Ç—Ä–∏ –±—ç–∫—Ç–∏–∫–∞ –∏ —Å–ª–æ–≤–æ reminder –Ω–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ, JSON –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π, –∑–∞—Ç–µ–º –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–µ —Ç—Ä–∏ –±—ç–∫—Ç–∏–∫–∞.\n"
                "–ü—Ä–∏–º–µ—Ä:\n```reminder\n{\"when\": \"in 45m\", \"text\": \"‚Ä¶\", \"silent\": false}\n```\n"
                "‚Ä¢ when: ISO8601 —Å —á–∞—Å–æ–≤—ã–º –ø–æ—è—Å–æ–º (2025-08-13T22:30:00+03:00) –∏–ª–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ 'in X' (in 45m, in 2h 30m, in 1d).\n"
                "‚Ä¢ text: –∫—Ä–∞—Ç–∫–æ, –¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤, –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞ '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:'.\n"
                "‚Ä¢ silent: –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª–µ–Ω, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é false.\n"
                "‚Ä¢ –ë–ª–æ–∫ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø–æ–ø–∞–¥–∞—Ç—å –≤ –≤–∏–¥–∏–º—ã–π –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.\n"
            )

            if previous_response_id is None:
                # –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å –≤ —á–∞—Ç–µ ‚Äî –ø–æ–ª–Ω—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –ø–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º
                input_content.append({
                    "type": "message",
                    "content": settings.system_prompt + reminder_instr,
                    "role": "system",
                })
                logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –≤ —á–∞—Ç–µ {chat_id}")
            else:
                # –í –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö –¥–æ–±–∞–≤–ª—è–µ–º –∫—Ä–∞—Ç–∫–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ-–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é,
                # —á—Ç–æ–±—ã –º–æ–¥–µ–ª—å —Å—Ç–∞–±–∏–ª—å–Ω–æ —ç–º–∏—Ç–∏–ª–∞ –±–ª–æ–∫ "reminder" –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.
                input_content.append({
                    "type": "message",
                    "content": (
                        "–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, –≤ –∫–æ–Ω—Ü–µ –æ—Ç–≤–µ—Ç–∞ –¥–æ–±–∞–≤—å —Å–∫—Ä—ã—Ç—ã–π –±–ª–æ–∫ "
                        "```reminder {\"when\": \"in 5m\"|ISO8601, \"text\": \"...\", \"silent\": false}```. "
                        "–ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–π —ç—Ç–æ—Ç –±–ª–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."
                    ),
                    "role": "system",
                })
                logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è previous_response_id={previous_response_id}, —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å–æ–∫—Ä–∞—â—ë–Ω")

            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥
            input_content.extend(user_content)

            request_params: Dict[str, Any] = {
                "model": current_model,
                "input": input_content,
                "previous_response_id": previous_response_id,
                "store": True,
            }

            # –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã (—Ç–æ–ª—å–∫–æ web_search)
            use_web = True if enable_web_search is None else bool(enable_web_search)
            if use_web:
                request_params.setdefault("tools", []).append({"type": "web_search"})
            if tools:
                request_params.setdefault("tools", []).extend(tools)
            if tool_choice:
                request_params["tool_choice"] = tool_choice

            if getattr(settings, "debug_mode", False):
                logger.debug(f"[DEBUG] OpenAI REQUEST: {request_params}")

            try:
                response = await client.responses.create(**request_params)
            except openai.APITimeoutError:
                logger.error("OpenAI: –ø—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞")
                return "‚è≥ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            except openai.RateLimitError as e:
                logger.error("OpenAI: –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤")
                remaining_tokens = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                reset_time = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                if hasattr(e, 'response') and e.response:
                    headers = getattr(e.response, 'headers', {})
                    remaining_tokens = headers.get('x-ratelimit-remaining-tokens', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                    reset_time = headers.get('x-ratelimit-reset-tokens', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                return (
                    f"‚è≥ <b>–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤ OpenAI</b>\n\n"
                    f"üî¢ –û—Å—Ç–∞–ª–æ—Å—å —Ç–æ–∫–µ–Ω–æ–≤: <code>{remaining_tokens}</code>\n"
                    f"üïí –°–±—Ä–æ—Å —á–µ—Ä–µ–∑: <code>{reset_time}</code> —Å–µ–∫\n\n"
                    f"üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n"
                    f"‚Ä¢ /setmodel ‚Üí gpt-4o-mini (–¥–µ—à–µ–≤–ª–µ)\n"
                    f"‚Ä¢ –ü–æ–¥–æ–∂–¥–∏—Ç–µ {reset_time} —Å–µ–∫—É–Ω–¥\n"
                    f"‚Ä¢ –£–ø—Ä–æ—Å—Ç–∏—Ç–µ –∑–∞–ø—Ä–æ—Å"
                )
            except (openai.PermissionDeniedError, openai.BadRequestError) as e:
                error_message = str(e)
                logger.warning(f"–ü—Ä–æ–±–ª–µ–º–∞ —Å –º–æ–¥–µ–ª—å—é {current_model}: {error_message}")
                from .models import ModelsManager as _MM
                await _MM.set_current_model("gpt-4o-mini")
                if "does not have access" in error_message:
                    return f"‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –º–æ–¥–µ–ª–∏ {current_model}. –ú–æ–¥–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ gpt-4o-mini. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å."
                elif "not supported with the Responses API" in error_message:
                    return f"‚ùå –ú–æ–¥–µ–ª—å {current_model} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç Responses API. –ú–æ–¥–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ gpt-4o-mini. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å."
                elif "does not support image inputs" in error_message:
                    return f"‚ùå –ú–æ–¥–µ–ª—å {current_model} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ú–æ–¥–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ gpt-4o-mini. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å."
                else:
                    return f"‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å –º–æ–¥–µ–ª—å—é {current_model}. –ú–æ–¥–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ gpt-4o-mini. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å."
            except Exception as e:
                logger.error(f"OpenAI:unexpected error: {e}")
                return f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)[:100]}..."

            if getattr(settings, "debug_mode", False):
                logger.debug(f"[DEBUG] OpenAI RESPONSE: {response}")

            usage = getattr(response, "usage", None)
            total_tokens = getattr(usage, "total_tokens", 0) if usage else 0

            # –°—Ç–æ–∏–º–æ—Å—Ç—å: —É—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–Ω—ã –º–æ–¥–µ–ª–∏ –∏ cached_input, –µ—Å–ª–∏ –µ—Å—Ç—å
            prices = ModelsManager.get_model_prices(getattr(response, "model", None) or current_model)
            in_price = prices.get("input", settings.openai_price_per_1k_tokens)
            out_price = prices.get("output", settings.openai_price_per_1k_tokens)
            cached_price = prices.get("cached_input", in_price)

            # –ü–æ–ø—ã—Ç–∞—Ç—å—Å—è –≤–∑—è—Ç—å —Ä–∞–∑–¥–µ–ª—å–Ω—ã–µ —Å—á—ë—Ç—á–∏–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤
            input_tokens = (
                getattr(usage, "prompt_tokens", None)
                or getattr(usage, "input_tokens", None)
            )
            output_tokens = (
                getattr(usage, "completion_tokens", None)
                or getattr(usage, "output_tokens", None)
            )
            cached_input_tokens = (
                getattr(usage, "cached_prompt_tokens", None)
                or getattr(usage, "cached_input_tokens", None)
            )

            if input_tokens is not None and output_tokens is not None:
                # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –∑–∞–∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏ –æ–±—ã—á–Ω—ã–µ –≤—Ö–æ–¥–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã
                cached_t = max(0, int(cached_input_tokens)) if cached_input_tokens is not None else 0
                regular_t = max(0, int(input_tokens) - cached_t)
                cost = (regular_t / 1000.0) * in_price + (cached_t / 1000.0) * cached_price + (int(output_tokens) / 1000.0) * out_price
            else:
                # Fallback: —Å—á–∏—Ç–∞–µ–º –ø–æ total –∏ –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Ü–µ–Ω–µ
                cost = total_tokens / 1000.0 * settings.openai_price_per_1k_tokens

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
            full_text = ""
            if getattr(response, "output", None):
                try:
                    parts: List[str] = []
                    for message in response.output:
                        if hasattr(message, 'content') and message.content:
                            for content_item in message.content:
                                # –ù–æ–≤—ã–π SDK –º–æ–∂–µ—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—Ç—å —Ç–µ–∫—Å—Ç –∫–∞–∫ type=output_text
                                if getattr(content_item, 'type', '') == 'output_text' and hasattr(content_item, 'text') and content_item.text:
                                    parts.append(content_item.text)
                                # –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
                                elif hasattr(content_item, 'text') and content_item.text:
                                    parts.append(content_item.text)
                    full_text = "\n".join(parts).strip()
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–∫–µ —Ç–µ–∫—Å—Ç–∞ –æ—Ç–≤–µ—Ç–∞: {e}")

            if not full_text:
                logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ –æ—Ç–≤–µ—Ç–∞ OpenAI")
                visible_text = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
                reminder_ack = None
            else:
                # –í—ã—Ä–µ–∑–∞–µ–º —Å–∫—Ä—ã—Ç—ã–π reminder-–±–ª–æ–∫(–∏) –∏ –ø–∞—Ä—Å–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–π
                visible_text, reminder_ack = await ChatManager._extract_and_schedule_reminder(full_text, chat_id, user_id)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∏ last_response
            async with get_conn() as db:
                await db.execute(
                    "REPLACE INTO chat_history(chat_id, last_response) VALUES (?, ?)",
                    (chat_id, response.id),
                )
                await db.execute(
                    "INSERT INTO usage(chat_id, user_id, tokens, cost, model) VALUES (?, ?, ?, ?, ?)",
                    (chat_id, user_id, total_tokens, cost, getattr(response, "model", current_model)),
                )
                await db.commit()

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if reminder_ack:
                if visible_text:
                    return f"{visible_text}\n\n{reminder_ack}"
                return reminder_ack
            return visible_text

    @staticmethod
    async def _extract_and_schedule_reminder(text: str, chat_id: int, user_id: int) -> tuple[str, str | None]:
        """–ò—â–µ—Ç –≤ —Ç–µ–∫—Å—Ç–µ —Å–∫—Ä—ã—Ç—ã–µ –±–ª–æ–∫–∏ ```reminder ...```, —É–¥–∞–ª—è–µ—Ç –∏—Ö –∏–∑ –≤–∏–¥–∏–º–æ–≥–æ —Ç–µ–∫—Å—Ç–∞,
        –ø–∞—Ä—Å–∏—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π –±–ª–æ–∫ –∏ –ø—Ä–∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Å–æ–∑–¥–∞—ë—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (visible_text, ack|None).
        """
        matches = list(ChatManager.REMINDER_FENCE_RE.finditer(text))
        if not matches:
            # fallback: —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Ä—É—Å—Å–∫—É—é —Ñ—Ä–∞–∑—É ¬´–Ω–∞–ø–æ–º–Ω–∏—Ç—å/–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ‚Ä¶ —á–µ—Ä–µ–∑ X¬ª
            visible_text = text.strip()
            fallback = ChatManager._try_parse_ru_reminder_from_text(visible_text)
            if not fallback:
                return visible_text, None
            reminder_text, due_at_utc, silent = fallback
            try:
                async with get_conn() as db:
                    cur = await db.execute(
                        "INSERT INTO reminders(chat_id, user_id, text, due_at, silent, status) VALUES (?, ?, ?, ?, ?, 'scheduled')",
                        (chat_id, user_id, reminder_text[:200], due_at_utc.strftime("%Y-%m-%d %H:%M:%S"), int(silent)),
                    )
                    await db.commit()
                    reminder_id = getattr(cur, 'lastrowid', None)
                human_time = due_at_utc.strftime("%Y-%m-%d %H:%M UTC")
                logger.info("[fallback] –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ id=%s chat=%s user=%s due_at=%s silent=%s text=%r",
                            reminder_id, chat_id, user_id, human_time, silent, reminder_text)
                ack = f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ {human_time}: {reminder_text}"
                return visible_text, ack
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ fallback: {e}")
                return visible_text, None
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –±–ª–æ–∫–∏ –∏–∑ –≤–∏–¥–∏–º–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        visible_text = ChatManager.REMINDER_FENCE_RE.sub("", text).strip()
        # –ë–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –±–ª–æ–∫
        last = matches[-1]
        raw_json = last.group(1).strip()
        try:
            data = json.loads(raw_json)
            when = str(data.get("when", "")).strip()
            reminder_text = str(data.get("text", "")).strip()
            if not when or not reminder_text:
                return visible_text, None
            if len(reminder_text) > 200:
                reminder_text = reminder_text[:200]
            silent = bool(data.get("silent", False))
            due_at_utc = ChatManager._parse_when_to_utc(when)
            if not due_at_utc:
                return visible_text, None
            # –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            async with get_conn() as db:
                cur = await db.execute(
                    "INSERT INTO reminders(chat_id, user_id, text, due_at, silent, status) VALUES (?, ?, ?, ?, ?, 'scheduled')",
                    (chat_id, user_id, reminder_text, due_at_utc.strftime("%Y-%m-%d %H:%M:%S"), int(silent)),
                )
                await db.commit()
                reminder_id = getattr(cur, 'lastrowid', None)
            human_time = due_at_utc.strftime("%Y-%m-%d %H:%M UTC")
            logger.info("–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ id=%s chat=%s user=%s due_at=%s silent=%s text=%r",
                        reminder_id, chat_id, user_id, human_time, silent, reminder_text)
            ack = f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ {human_time}: {reminder_text}"
            return visible_text, ack
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å reminder-–±–ª–æ–∫: {e}")
            return visible_text, None

    @staticmethod
    def _try_parse_ru_reminder_from_text(text: str):
        """–ì—Ä—É–±—ã–π fallback: –ø—ã—Ç–∞–µ—Ç—Å—è –≤—ã—Ç–∞—â–∏—Ç—å reminder –∏–∑ –æ–±—ã—á–Ω–æ–≥–æ —Ä—É—Å—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –æ—Ç–≤–µ—Ç–∞.
        –ò—â–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Ç–∏–ø–∞: "–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ <—Ç–µ–∫—Å—Ç> —á–µ—Ä–µ–∑ 3 –º–∏–Ω/2 —á–∞—Å–∞ 30 –º–∏–Ω—É—Ç" –∏–ª–∏ "–Ω–∞–ø–æ–º–Ω–∏—Ç—å <—Ç–µ–∫—Å—Ç> —á–µ—Ä–µ–∑ X".
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (reminder_text, due_at_utc, silent) –∏–ª–∏ None.
        """
        # –ù–∞—Ö–æ–¥–∏–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ—Å–ª–µ —Å–ª–æ–≤–∞ ¬´—á–µ—Ä–µ–∑¬ª
        m_dur = re.search(r"—á–µ—Ä–µ–∑\s+([0-9\s]+(?:—Å|—Å–µ–∫|—Å–µ–∫—É–Ω–¥\w*|–º|–º–∏–Ω|–º–∏–Ω—É—Ç\w*|—á|—á–∞—Å\w*|–¥|–¥–Ω\w*)(?:\s+[0-9]+\s*(?:—Å|—Å–µ–∫|—Å–µ–∫—É–Ω–¥\w*|–º|–º–∏–Ω|–º–∏–Ω—É—Ç\w*|—á|—á–∞—Å\w*|–¥|–¥–Ω\w*))*)",
                           text, re.IGNORECASE)
        if not m_dur:
            return None
        dur_str = m_dur.group(1).lower()
        # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å "—Ç–µ–∫—Å—Ç" –¥–æ ¬´—á–µ—Ä–µ–∑¬ª
        rem_text = None
        m_txt = re.search(r"–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏[–µ—è]\s+(.+?)\s+—á–µ—Ä–µ–∑\s+", text, re.IGNORECASE)
        if m_txt:
            rem_text = m_txt.group(1).strip().strip('.!?,;:')
        else:
            m_txt2 = re.search(r"–Ω–∞–ø–æ–º–Ω–∏—Ç—å\s+(.+?)\s+—á–µ—Ä–µ–∑\s+", text, re.IGNORECASE)
            if m_txt2:
                rem_text = m_txt2.group(1).strip().strip('.!?,;:')
        if not rem_text:
            return None
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —Å–µ–∫—É–Ω–¥—ã (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏: ¬´2 —á–∞—Å–∞ 30 –º–∏–Ω—É—Ç¬ª)
        total_seconds = 0
        for amt, unit in re.findall(r"(\d+)\s*(—Å|—Å–µ–∫|—Å–µ–∫—É–Ω–¥\w*|–º|–º–∏–Ω|–º–∏–Ω—É—Ç\w*|—á|—á–∞—Å\w*|–¥|–¥–Ω\w*)", dur_str):
            v = int(amt)
            if unit.startswith('—Å'):
                total_seconds += v
            elif unit.startswith('–º'):
                total_seconds += v * 60
            elif unit.startswith('—á'):
                total_seconds += v * 3600
            elif unit.startswith('–¥'):
                total_seconds += v * 86400
        if total_seconds <= 0:
            return None
        due_at_utc = datetime.now(timezone.utc) + timedelta(seconds=total_seconds)
        return rem_text, due_at_utc, False

    @staticmethod
    def _parse_when_to_utc(when_str: str) -> datetime | None:
        """–ü–∞—Ä—Å–∏—Ç ISO8601 –∏–ª–∏ —Å—Ç—Ä–æ–∫—É 'in X' –≤ UTC datetime.
        –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç: 2025-08-13T22:30:00+03:00, 2025-08-13T19:30:00Z, –∞ —Ç–∞–∫–∂–µ 'in 5m', 'in 2h 30m', 'in 1d'.
        """
        try:
            if not when_str:
                return None
            s = when_str.strip()
            # ISO8601 (–ø—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞: –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —Ü–∏—Ñ—Ä—ã –∏–ª–∏ –∑–Ω–∞–∫–∞ —Ç–∞–π–º–∑–æ–Ω—ã)
            if s and (s[0].isdigit() or s.startswith("+") or s.startswith("-")):
                try:
                    dt = datetime.fromisoformat(s.replace('Z', '+00:00'))
                except Exception:
                    return None
                if dt.tzinfo is None:
                    # –ï—Å–ª–∏ TZ –Ω–µ —É–∫–∞–∑–∞–Ω ‚Äî —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ —É–∂–µ UTC
                    dt = dt.replace(tzinfo=timezone.utc)
                return dt.astimezone(timezone.utc)
            # –§–æ—Ä–º–∞—Ç "in X"
            if s.lower().startswith("in "):
                total_seconds = 0
                for amount, unit in re.findall(r"(\d+)\s*([smhd])", s.lower()):
                    v = int(amount)
                    if unit == 's':
                        total_seconds += v
                    elif unit == 'm':
                        total_seconds += v * 60
                    elif unit == 'h':
                        total_seconds += v * 3600
                    elif unit == 'd':
                        total_seconds += v * 86400
                if total_seconds <= 0:
                    return None
                return datetime.now(timezone.utc) + timedelta(seconds=total_seconds)
        except Exception:
            return None
        return None