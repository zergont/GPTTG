def escape_markdown_v2(text: str) -> str:
    """
    –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã –¥–ª—è Telegram MarkdownV2.
    """
    escape_chars = r'_*[]()~`>#+-=|{}.!'
    return ''.join(f'\\{c}' if c in escape_chars else c for c in text)


def send_long_message_v2(text: str, max_length: int = 4096) -> list[str]:
    """
    –†–∞–∑–±–∏–≤–∞–µ—Ç –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏ –¥–ª—è MarkdownV2, —Å–æ—Ö—Ä–∞–Ω—è—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.
    
    Args:
        text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        max_length: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        
    Returns:
        list[str]: –°–ø–∏—Å–æ–∫ —á–∞—Å—Ç–µ–π —Å–æ–æ–±—â–µ–Ω–∏—è (—É–∂–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–ª—è MarkdownV2)
    """
    # –°–Ω–∞—á–∞–ª–∞ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç
    escaped_text = escape_markdown_v2(text)
    
    if len(escaped_text) <= max_length:
        return [escaped_text]
    
    chunks = []
    current_pos = 0
    
    while current_pos < len(escaped_text):
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—É —Å–ª–µ–¥—É—é—â–µ–≥–æ —á–∞–Ω–∫–∞
        end_pos = current_pos + max_length
        
        if end_pos >= len(escaped_text):
            # –ü–æ—Å–ª–µ–¥–Ω–∏–π –∫—É—Å–æ–∫
            chunks.append(escaped_text[current_pos:])
            break
        
        # –ò—â–µ–º —É–¥–æ–±–Ω–æ–µ –º–µ—Å—Ç–æ –¥–ª—è —Ä–∞–∑—Ä—ã–≤–∞ (–ø–æ –ø–µ—Ä–µ–Ω–æ—Å—É —Å—Ç—Ä–æ–∫–∏)
        safe_break = escaped_text.rfind('\n', current_pos, end_pos)
        if safe_break == -1 or safe_break == current_pos:
            # –ï—Å–ª–∏ –Ω–µ—Ç –ø–µ—Ä–µ–Ω–æ—Å–∞ —Å—Ç—Ä–æ–∫–∏, –∏—â–µ–º –ø—Ä–æ–±–µ–ª
            safe_break = escaped_text.rfind(' ', current_pos, end_pos)
        
        if safe_break == -1 or safe_break == current_pos:
            # –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–æ–±–µ–ª–∞, —Ä–µ–∂–µ–º –ø–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω–µ
            safe_break = end_pos
        
        chunks.append(escaped_text[current_pos:safe_break])
        current_pos = safe_break + (1 if escaped_text[safe_break:safe_break+1] in ['\n', ' '] else 0)
    
    return chunks


def format_file_analysis_v2(filename: str, content: str) -> str:
    """
    –ö—Ä–∞—Å–∏–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–∞ –¥–ª—è MarkdownV2.

    Args:
        filename: –ò–º—è —Ñ–∞–π–ª–∞
        content: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–≤–µ—Ç–∞

    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è MarkdownV2
    """
    safe_filename = escape_markdown_v2(filename)
    safe_content = escape_markdown_v2(content)

    return f"üìÑ *–ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞* `{safe_filename}`:\n\n{safe_content}"


def format_system_info_v2(version: str, platform: str, lock_status: str,
                         process_count: str, files: list[str], tools: list[str]) -> str:
    """
    –ö—Ä–∞—Å–∏–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è MarkdownV2.
    """
    safe_version = escape_markdown_v2(version)
    safe_platform = escape_markdown_v2(platform)
    safe_process_count = escape_markdown_v2(str(process_count))

    text = (
        f"üîß *–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:*\n\n"
        f"üìã *–í–µ—Ä—Å–∏—è –±–æ—Ç–∞:* `{safe_version}`\n"
        f"üñ•Ô∏è *–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:* {safe_platform}\n"
        f"üîí *–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞:* {lock_status}\n"
        f"‚öôÔ∏è *–ü—Ä–æ—Ü–µ—Å—Å–æ–≤ bot\\.main:* {safe_process_count}\n\n"
        f"üíæ *–°–∏—Å—Ç–µ–º–Ω—ã–µ —Ñ–∞–π–ª—ã:*\n"
    )

    for file_info in files:
        text += f"  {file_info}\n"

    if tools:
        text += f"\nüõ†Ô∏è *–°–∏—Å—Ç–µ–º–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã:*\n"
        for tool_info in tools[:5]:
            text += f"  {tool_info}\n"

    return text