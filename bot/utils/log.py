"""–ë–∞–∑–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Ä–æ—Ç–∞—Ü–∏–µ–π —Ñ–∞–π–ª–æ–≤."""
import logging
import sys
import os
import glob
from logging.handlers import RotatingFileHandler
from bot.config import settings


def _purge_old_logs() -> None:
    """–£–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ –ª–æ–≥-—Ñ–∞–π–ª—ã –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ.

    –£–¥–∞–ª—è—é—Ç—Å—è –≤—Å–µ —Ñ–∞–π–ª—ã –≤ –∫–∞—Ç–∞–ª–æ–≥–µ logs, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —à–∞–±–ª–æ–Ω–∞–º:
    - *.log
    - *.log.* (—Ñ–∞–π–ª—ã —Ä–æ—Ç–∞—Ü–∏–∏)
    –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –¥–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è.
    """
    try:
        os.makedirs("logs", exist_ok=True)
        removed = 0
        for pattern in ("*.log", "*.log.*"):
            for path in glob.glob(os.path.join("logs", pattern)):
                try:
                    os.remove(path)
                    removed += 1
                except FileNotFoundError:
                    continue
                except PermissionError:
                    # –ù–∞ Windows —Ñ–∞–π–ª –º–æ–≥ –±—ã—Ç—å –∑–∞–Ω—è—Ç ‚Äî –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                    continue
                except Exception:
                    continue
        if removed:
            print(f"üßπ –û—á–∏—â–µ–Ω–æ –ª–æ–≥‚Äë—Ñ–∞–π–ª–æ–≤: {removed}")
    except Exception as e:
        # –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏–∑‚Äë–∑–∞ –æ—à–∏–±–æ–∫ –æ—á–∏—Å—Ç–∫–∏
        print(f"[log] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –ª–æ–≥–∏: {e}")


# –û—á–∏—â–∞–µ–º –ª–æ–≥–∏ –¥–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
_purge_old_logs()

# –ü–æ—Ç–æ–∫–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ (stdout) –≤—Å–µ–≥–¥–∞ –≤–∫–ª—é—á–µ–Ω
log_handlers = [logging.StreamHandler(sys.stdout)]

# –§–∞–π–ª–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å —Ä–æ—Ç–∞—Ü–∏–µ–π —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏ –≤ –ø—Ä–æ–¥–µ,
# –Ω–æ —Å —Ä–∞–∑–Ω—ã–º–∏ —É—Ä–æ–≤–Ω—è–º–∏:
#  - DEBUG_MODE=1 ‚Üí –ø–∏—à–µ–º –≤—Å—ë (DEBUG)
#  - DEBUG_MODE=0 ‚Üí –ø–∏—à–µ–º —Ç–æ–ª—å–∫–æ –æ—à–∏–±–∫–∏ (ERROR)
try:
    os.makedirs("logs", exist_ok=True)
    max_bytes = getattr(settings, "max_log_mb", 5) * 1024 * 1024
    rotating_handler = RotatingFileHandler(
        filename="logs/bot.log",
        maxBytes=max_bytes,
        backupCount=3,
        encoding="utf-8",
    )
    rotating_handler.setLevel(logging.DEBUG if getattr(settings, "debug_mode", False) else logging.ERROR)
    log_handlers.append(rotating_handler)
    print(
        f"üìù –õ–æ–≥–∏ –ø–∏—à—É—Ç—Å—è –≤ logs/bot.log (—É—Ä–æ–≤–µ–Ω—å: "
        f"{'DEBUG' if getattr(settings, 'debug_mode', False) else 'ERROR'}; "
        f"–ª–∏–º–∏—Ç {max_bytes // (1024*1024)} –ú–ë)"
    )
except Exception as e:
    print(f"[log] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫: {e}")

# –£—Ä–æ–≤–µ–Ω—å –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞:
#  - DEBUG_MODE=1 ‚Üí DEBUG (–∏ stdout, –∏ —Ñ–∞–π–ª –ø–æ–ª—É—á–∞—é—Ç debug)
#  - DEBUG_MODE=0 ‚Üí INFO (stdout INFO+, —Ñ–∞–π–ª –æ—Ç—Ñ–∏–ª—å—Ç—Ä—É–µ—Ç –¥–æ ERROR)
logging.basicConfig(
    level=logging.DEBUG if getattr(settings, "debug_mode", False) else logging.INFO,
    format="%(asctime)s [%(levelname)s] %(name)s: %(message)s",
    handlers=log_handlers,
)

logger = logging.getLogger("bot")