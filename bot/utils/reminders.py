"""Reminders scheduler: polls DB for due reminders and sends messages to chat."""
from __future__ import annotations

import asyncio
from dataclasses import dataclass
from datetime import datetime, timezone
from typing import List

from aiogram import Bot

from bot.utils.db import get_conn
from bot.utils.log import logger
from bot.utils.openai import OpenAIClient


@dataclass
class Reminder:
    id: int
    chat_id: int
    user_id: int
    text: str
    due_at: str  # UTC in '%Y-%m-%d %H:%M:%S'
    silent: bool


async def _fetch_due(limit: int = 5) -> List[Reminder]:
    now_utc = datetime.now(timezone.utc).strftime("%Y-%m-%d %H:%M:%S")
    async with get_conn() as db:
        cur = await db.execute(
            """
            SELECT id, chat_id, user_id, text, due_at, silent
            FROM reminders
            WHERE status = 'scheduled' AND due_at <= ?
            ORDER BY due_at ASC
            LIMIT ?
            """,
            (now_utc, limit),
        )
        rows = await cur.fetchall()
    return [Reminder(id=r[0], chat_id=r[1], user_id=r[2], text=r[3], due_at=r[4], silent=bool(r[5])) for r in rows]


async def _mark_status(reminder_id: int, status: str) -> None:
    async with get_conn() as db:
        if status == "done":
            await db.execute(
                "UPDATE reminders SET status='done', executed_at=CURRENT_TIMESTAMP WHERE id=?",
                (reminder_id,),
            )
        else:
            await db.execute(
                "UPDATE reminders SET status=?, executed_at=CURRENT_TIMESTAMP WHERE id=?",
                (status, reminder_id),
            )
        await db.commit()


async def _handle_one(bot: Bot, r: Reminder) -> None:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –º–æ–¥–µ–ª—å –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Ç–∫–∏–π –∑–∞–ø—Ä–æ—Å –∫ –º–æ–¥–µ–ª–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        dt_utc = r.due_at  # —Å—Ç—Ä–æ–∫–∞ –≤ UTC '%Y-%m-%d %H:%M:%S'
        instruction = (
            "–°—Ñ–æ—Ä–º–∏—Ä—É–π –æ–¥–Ω–æ –∫–æ—Ä–æ—Ç–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ —Å—Ä–∞–±–æ—Ç–∞–≤—à–µ–º—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—é. "
            "–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ª–∞–∫–æ–Ω–∏—á–Ω—ã–º –∏ –ø–æ–Ω—è—Ç–Ω—ã–º. –ï—Å–ª–∏ —É–º–µ—Å—Ç–Ω–æ, –º–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–µ–∑–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É –ø–æ–≥–æ–¥—ã, –¥–æ—Ä–æ–∂–Ω—É—é —Å–∏—Ç—É–∞—Ü–∏—é, –≤—Ä–µ–º—è), –Ω–æ –∏–∑–±–µ–≥–∞–π –ª–∏—à–Ω–µ–π –±–æ–ª—Ç–æ–≤–Ω–∏."
        )
        user_msg = f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {r.text}. –°—Ä–∞–±–æ—Ç–∞–ª–æ —Å–µ–π—á–∞—Å (UTC {dt_utc})."
        content = [{
            "type": "message",
            "role": "user",
            "content": f"{instruction}\n\n{user_msg}"
        }]

        # –ü—Ä–æ—Å–∏–º –º–æ–¥–µ–ª—å; –æ—Ç–∫–ª—é—á–∞–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π, –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å web_search=auto
        response_text = await OpenAIClient.responses_request(
            r.chat_id,
            r.user_id,
            content,
            previous_response_id=None,
            enable_web_search=True,
            include_reminder_tools=False,
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏
        await bot.send_message(r.chat_id, response_text, disable_notification=r.silent)
        await _mark_status(r.id, "done")
    except Exception as e:
        logger.error(f"reminder {r.id} handling failed: {e}")
        # –§–æ–ª–±—ç–∫: —Å—Ç–∞—Ä–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ (–Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è)
        try:
            text = f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {r.text}" if not r.text.lower().startswith("–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ") else r.text
            await bot.send_message(r.chat_id, text, disable_notification=r.silent)
            await _mark_status(r.id, "done")
        except Exception:
            try:
                await _mark_status(r.id, "error")
            except Exception:
                pass


def start_reminders_scheduler(bot: Bot) -> asyncio.Task:
    stop_event = asyncio.Event()

    async def _loop():
        logger.info("‚è∞ Reminders scheduler started")
        try:
            while not stop_event.is_set():
                try:
                    due = await _fetch_due(limit=5)
                    for r in due:
                        await _handle_one(bot, r)
                except Exception as e:
                    logger.warning(f"reminders loop warn: {e}")
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∏—Ç–µ—Ä–∞—Ü–∏—è–º–∏
                try:
                    await asyncio.wait_for(stop_event.wait(), timeout=10.0)
                except asyncio.TimeoutError:
                    pass
        finally:
            logger.info("‚èπ Reminders scheduler stopped")

    task = asyncio.create_task(_loop(), name="reminders_scheduler")
    # –ü–æ–º–µ—á–∞–µ–º —Å—Ç–æ–ø-—Å–æ–±—ã—Ç–∏–µ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–Ω–∞—Ä—É–∂–∏
    setattr(task, "_gpttg_stop_event", stop_event)
    return task
