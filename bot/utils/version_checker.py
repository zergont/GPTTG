"""–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–µ—Ä—Å–∏–π –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π."""
import asyncio
import subprocess
from pathlib import Path
from typing import Optional, Tuple, Dict, Any
import re

from bot.config import VERSION, settings
from bot.utils.log import logger


class UpdateChecker:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π."""
    
    def __init__(self, project_root: Optional[Path] = None):
        self.project_root = project_root or Path(__file__).parent.parent.parent
        self.current_version = VERSION
    
    async def check_updates_available(self, branch: str = "master") -> Dict[str, Any]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π.
        
        Args:
            branch: –í–µ—Ç–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é master)
            
        Returns:
            dict: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
                - available: bool - –µ—Å—Ç—å –ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                - current_version: str - —Ç–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è
                - latest_version: str - –ø–æ—Å–ª–µ–¥–Ω—è—è –≤–µ—Ä—Å–∏—è (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞)
                - current_hash: str - —Ç–µ–∫—É—â–∏–π commit hash
                - latest_hash: str - –ø–æ—Å–ª–µ–¥–Ω–∏–π commit hash (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
                - commits_behind: int - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–∏—Ç–æ–≤ –æ—Ç—Å—Ç–∞–≤–∞–Ω–∏—è
                - error: str - –æ—à–∏–±–∫–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
        """
        result = {
            "available": False,
            "current_version": self.current_version,
            "latest_version": None,
            "current_hash": None,
            "latest_hash": None,
            "commits_behind": 0,
            "error": None
        }
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π commit hash
            current_hash_result = await asyncio.create_subprocess_exec(
                "git", "rev-parse", "--short", "HEAD",
                stdout=asyncio.subprocess.PIPE,
                stderr=asyncio.subprocess.PIPE,
                cwd=str(self.project_root)
            )
            stdout, stderr = await current_hash_result.communicate()
            
            if current_hash_result.returncode == 0:
                result["current_hash"] = stdout.decode().strip()
            else:
                result["error"] = f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π hash: {stderr.decode()}"
                return result
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–¥–∞–ª–µ–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
            fetch_result = await asyncio.create_subprocess_exec(
                "git", "fetch", "origin", branch,
                stdout=asyncio.subprocess.PIPE,
                stderr=asyncio.subprocess.PIPE,
                cwd=str(self.project_root)
            )
            await fetch_result.communicate()
            
            if fetch_result.returncode != 0:
                result["error"] = "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏"
                return result
            
            # –ü–æ–ª—É—á–∞–µ–º hash –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–æ–º–º–∏—Ç–∞
            latest_hash_result = await asyncio.create_subprocess_exec(
                "git", "rev-parse", "--short", f"origin/{branch}",
                stdout=asyncio.subprocess.PIPE,
                stderr=asyncio.subprocess.PIPE,
                cwd=str(self.project_root)
            )
            stdout, stderr = await latest_hash_result.communicate()
            
            if latest_hash_result.returncode == 0:
                result["latest_hash"] = stdout.decode().strip()
            else:
                result["error"] = f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π hash: {stderr.decode()}"
                return result
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–∏—Ç–æ–≤ –æ—Ç—Å—Ç–∞–≤–∞–Ω–∏—è
            behind_result = await asyncio.create_subprocess_exec(
                "git", "rev-list", "--count", f"HEAD..origin/{branch}",
                stdout=asyncio.subprocess.PIPE,
                stderr=asyncio.subprocess.PIPE,
                cwd=str(self.project_root)
            )
            stdout, stderr = await behind_result.communicate()
            
            if behind_result.returncode == 0:
                commits_behind = int(stdout.decode().strip())
                result["commits_behind"] = commits_behind
                result["available"] = commits_behind > 0
            else:
                result["error"] = f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Å—á–∏—Ç–∞—Ç—å –æ—Ç—Å—Ç–∞–≤–∞–Ω–∏–µ: {stderr.decode()}"
                return result
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –≤–µ—Ä—Å–∏—é –∏–∑ pyproject.toml
            if result["available"]:
                try:
                    version_result = await asyncio.create_subprocess_exec(
                        "git", "show", f"origin/{branch}:pyproject.toml",
                        stdout=asyncio.subprocess.PIPE,
                        stderr=asyncio.subprocess.PIPE,
                        cwd=str(self.project_root)
                    )
                    stdout, stderr = await version_result.communicate()
                    
                    if version_result.returncode == 0:
                        pyproject_content = stdout.decode()
                        version_match = re.search(r'version\s*=\s*"([^"]+)"', pyproject_content)
                        if version_match:
                            result["latest_version"] = version_match.group(1)
                except Exception as e:
                    logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–µ—Ä—Å–∏—é –∏–∑ pyproject.toml: {e}")
            
            return result
            
        except Exception as e:
            result["error"] = f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {str(e)}"
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {e}")
            return result
    
    async def get_recent_commits(self, branch: str = "master", count: int = 5) -> list:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∫–æ–º–º–∏—Ç–æ–≤.
        
        Args:
            branch: –í–µ—Ç–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–∏—Ç–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è
            
        Returns:
            list: –°–ø–∏—Å–æ–∫ –∫–æ–º–º–∏—Ç–æ–≤ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        """
        commits = []
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∫–æ–º–º–∏—Ç—ã
            commits_result = await asyncio.create_subprocess_exec(
                "git", "log", f"origin/{branch}", 
                "--oneline", f"-{count}", "--pretty=format:%h|%s|%an|%ar",
                stdout=asyncio.subprocess.PIPE,
                stderr=asyncio.subprocess.PIPE,
                cwd=str(self.project_root)
            )
            stdout, stderr = await commits_result.communicate()
            
            if commits_result.returncode == 0:
                lines = stdout.decode().strip().split('\n')
                for line in lines:
                    if '|' in line:
                        parts = line.split('|', 3)
                        if len(parts) >= 4:
                            commits.append({
                                "hash": parts[0],
                                "message": parts[1],
                                "author": parts[2],
                                "date": parts[3]
                            })
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–º–º–∏—Ç–æ–≤: {e}")
        
        return commits
    
    def format_update_info(self, update_info: Dict[str, Any]) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Telegram.
        
        Args:
            update_info: –†–µ–∑—É–ª—å—Ç–∞—Ç check_updates_available()
            
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        """
        if update_info.get("error"):
            return f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π:</b>\n<code>{update_info['error']}</code>"
        
        current_version = update_info["current_version"]
        current_hash = update_info.get("current_hash", "–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω")
        
        if not update_info["available"]:
            return (
                f"‚úÖ <b>–û–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è</b>\n\n"
                f"üìã –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: <code>{current_version}</code>\n"
                f"üîπ Commit: <code>{current_hash}</code>\n\n"
                f"üéØ –í—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –ø–æ—Å–ª–µ–¥–Ω—é—é –≤–µ—Ä—Å–∏—é!"
            )
        
        latest_version = update_info.get("latest_version", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞")
        latest_hash = update_info.get("latest_hash", "–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω")
        commits_behind = update_info.get("commits_behind", 0)
        
        text = (
            f"üîÑ <b>–î–æ—Å—Ç—É–ø–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ</b>\n\n"
            f"üìã –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: <code>{current_version}</code> ({current_hash})\n"
            f"üÜï –ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è: <code>{latest_version}</code> ({latest_hash})\n"
            f"üìä –û—Ç—Å—Ç–∞–≤–∞–Ω–∏–µ: <code>{commits_behind}</code> –∫–æ–º–º–∏—Ç(–æ–≤)\n\n"
            f"üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /update –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"
        )
        
        return text


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
update_checker = UpdateChecker()

__all__ = ['UpdateChecker', 'update_checker']