"""–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫."""
import traceback
from typing import Optional, Any, Callable, Awaitable
from functools import wraps
from aiogram.types import Message, CallbackQuery
import openai

from bot.utils.log import logger


class ErrorType:
    """–¢–∏–ø—ã –æ—à–∏–±–æ–∫ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏."""
    
    # OpenAI API –æ—à–∏–±–∫–∏
    OPENAI_TIMEOUT = ("‚è≥ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç OpenAI –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ.", 
                      "OpenAI API timeout")
    OPENAI_RATE_LIMIT = ("üîÑ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.", 
                         "OpenAI rate limit exceeded")
    OPENAI_AUTH = ("üîê –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ OpenAI. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", 
                   "OpenAI authentication error")
    OPENAI_BAD_REQUEST = ("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ OpenAI. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞—Ç—å.", 
                          "OpenAI bad request")
    OPENAI_NOT_FOUND = ("üîç –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ —Å–±—Ä–æ—à–µ–Ω–∞.", 
                        "OpenAI resource not found")
    
    # –§–∞–π–ª–æ–≤—ã–µ –æ—à–∏–±–∫–∏
    FILE_TOO_LARGE = ("üìÅ –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {} –ú–ë", 
                      "File too large")
    FILE_UNSUPPORTED = ("üìÑ –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: PDF, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", 
                        "Unsupported file type")
    FILE_DOWNLOAD_ERROR = ("üì• –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", 
                           "File download error")
    
    # –°–µ—Ç–µ–≤—ã–µ –æ—à–∏–±–∫–∏
    NETWORK_ERROR = ("üåê –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", 
                     "Network connection error")
    
    # –û–±—â–∏–µ –æ—à–∏–±–∫–∏
    UNKNOWN_ERROR = ("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", 
                     "Unknown error occurred")
    PERMISSION_DENIED = ("üö´ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", 
                         "Permission denied")


class ErrorHandler:
    """–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫."""
    
    @staticmethod
    def _get_error_info(exception: Exception) -> tuple[str, str]:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –æ—à–∏–±–∫–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
        
        # OpenAI –æ—à–∏–±–∫–∏
        if isinstance(exception, openai.APITimeoutError):
            return ErrorType.OPENAI_TIMEOUT
        elif isinstance(exception, openai.RateLimitError):
            return ErrorType.OPENAI_RATE_LIMIT
        elif isinstance(exception, openai.AuthenticationError):
            return ErrorType.OPENAI_AUTH
        elif isinstance(exception, openai.BadRequestError):
            return ErrorType.OPENAI_BAD_REQUEST
        elif isinstance(exception, openai.NotFoundError):
            return ErrorType.OPENAI_NOT_FOUND
        
        # –°–µ—Ç–µ–≤—ã–µ –æ—à–∏–±–∫–∏
        elif "ClientError" in str(type(exception).__name__) or "aiohttp" in str(type(exception).__module__ or ""):
            return ErrorType.NETWORK_ERROR
        
        # –§–∞–π–ª–æ–≤—ã–µ –æ—à–∏–±–∫–∏ (–æ–ø—Ä–µ–¥–µ–ª—è—é—Ç—Å—è –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—é)
        elif "too large" in str(exception).lower() or "–±–æ–ª—å—à–æ–π" in str(exception).lower():
            return ErrorType.FILE_TOO_LARGE
        elif "unsupported" in str(exception).lower() or "–Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π" in str(exception).lower():
            return ErrorType.FILE_UNSUPPORTED
        
        # –û–±—â–∏–µ –æ—à–∏–±–∫–∏
        else:
            return ErrorType.UNKNOWN_ERROR
    
    @staticmethod
    async def handle_error(
        exception: Exception, 
        message: Optional[Message] = None,
        callback: Optional[CallbackQuery] = None,
        context: str = "unknown"
    ) -> None:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
        
        Args:
            exception: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
            callback: Callback –¥–ª—è –æ—Ç–≤–µ—Ç–∞ (–µ—Å–ª–∏ message –Ω–µ —É–∫–∞–∑–∞–Ω)
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        
        user_message, tech_description = ErrorHandler._get_error_info(exception)
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        logger.error(
            f"Error in {context}: {tech_description} - {str(exception)}", 
            exc_info=True
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            if message:
                await message.answer(user_message)
            elif callback:
                await callback.message.answer(user_message)
                await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
        except Exception as send_error:
            logger.error(f"Failed to send error message: {send_error}")
    
    @staticmethod
    def error_handler(context: str = "handler"):
        """
        –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –≤ handlers.
        
        Args:
            context: –û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        def decorator(func: Callable[..., Awaitable[Any]]) -> Callable[..., Awaitable[Any]]:
            @wraps(func)
            async def wrapper(*args, **kwargs) -> Any:
                try:
                    return await func(*args, **kwargs)
                except Exception as e:
                    # –ü–æ–ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ Message –∏–ª–∏ CallbackQuery –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö
                    message = None
                    callback = None
                    
                    for arg in args:
                        if isinstance(arg, Message):
                            message = arg
                            break
                        elif isinstance(arg, CallbackQuery):
                            callback = arg
                            break
                    
                    await ErrorHandler.handle_error(e, message, callback, f"{context}:{func.__name__}")
                    return None
            
            return wrapper
        return decorator


# –£–¥–æ–±–Ω—ã–µ –∞–ª–∏–∞—Å—ã
handle_error = ErrorHandler.handle_error
error_handler = ErrorHandler.error_handler

__all__ = ['ErrorHandler', 'ErrorType', 'handle_error', 'error_handler']