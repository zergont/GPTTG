"""–ü—Ä–æ—Å—Ç—ã–µ middlewares: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î –∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫."""
from aiogram import BaseMiddleware
from aiogram.types import TelegramObject, Message, CallbackQuery
from bot.utils.log import logger
from bot.utils.db import init_db, save_user, mark_user_welcomed
from bot.utils.errors import ErrorHandler
from bot.keyboards import main_kb
from bot.config import settings


class StartupMiddleware(BaseMiddleware):
    async def __call__(self, handler, event: TelegramObject, data):
        # –ë–æ–ª—å—à–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î –∑–¥–µ—Å—å!
        return await handler(event, data)


class UserMiddleware(BaseMiddleware):
    """Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
    
    async def __call__(self, handler, event: TelegramObject, data):
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if isinstance(event, Message) and event.from_user:
            is_new_user = await save_user(event.from_user)
            
            if is_new_user:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                welcome_text = (
                    f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {event.from_user.first_name or '–¥—Ä—É–≥'}!\n\n"
                    f"–Ø ‚Äî —É–º–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–π –Ω–æ–≤—ã–π OpenAI Responses API. "
                    f"–ú–æ–≥—É:\n\n"
                    f"üí¨ –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã\n"
                    f"üñº –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\n"
                    f"üé§ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
                    f"üé® –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–∏ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é\n\n"
                    f"–ù–∞—á–Ω–∏—Ç–µ –æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏!"
                )
                
                try:
                    await event.answer(
                        welcome_text, 
                        reply_markup=main_kb(event.from_user.id == settings.admin_id)
                    )
                    await mark_user_welcomed(event.from_user.id)
                    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {event.from_user.id}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è: {e}")
        
        return await handler(event, data)


class ErrorMiddleware(BaseMiddleware):
    """–ì–ª–æ–±–∞–ª—å–Ω—ã–π middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫."""
    
    async def __call__(self, handler, event: TelegramObject, data):
        try:
            return await handler(event, data)
        except Exception as e:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
            message = None
            callback = None
            
            if isinstance(event, Message):
                message = event
            elif isinstance(event, CallbackQuery):
                callback = event
                
            await ErrorHandler.handle_error(
                e, 
                message=message, 
                callback=callback, 
                context="global_middleware"
            )
            
            # –ù–ï –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞ - –ø—Ä–æ—Å—Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
            return None