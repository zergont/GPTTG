"""–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
import asyncio
import os
import atexit
import signal
from pathlib import Path
from typing import Optional

from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode

from bot.config import settings, VERSION
from bot.middlewares import UserMiddleware, ErrorMiddleware
from bot import router
from bot.utils.log import logger
from bot.utils.http_client import close_session
from bot.utils.reminders import start_reminders_scheduler, start_self_calls_scheduler

# –ü—É—Ç—å –∫ lock-—Ñ–∞–π–ª—É –¥–ª—è single-instance
LOCK_PATH = Path(__file__).parent.parent / "gpttg-bot.lock"
_LOCK_PID: Optional[int] = None

# –†–µ–∂–∏–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ / –æ—Ç–ª–∞–¥–∫–∏)
ALLOW_MULTI = os.getenv("GPTTG_ALLOW_MULTI", "0") == "1"


def _pid_running(pid: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å —Å –¥–∞–Ω–Ω—ã–º PID."""
    try:
        os.kill(pid, 0)
        return True
    except ProcessLookupError:
        return False
    except PermissionError:
        # –ü—Ä–æ—Ü–µ—Å—Å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ –Ω–µ—Ç –ø—Ä–∞–≤ –ø–æ—Å–ª–∞—Ç—å —Å–∏–≥–Ω–∞–ª
        return True
    except Exception:
        # –í —Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å –∂–∏–≤
        return True


def acquire_single_instance_lock() -> None:
    """–°–æ–∑–¥–∞—ë—Ç lock-—Ñ–∞–π–ª –∏ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –∑–∞–ø—É—Å–∫ –≤—Ç–æ—Ä–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞."""
    global _LOCK_PID
    _LOCK_PID = os.getpid()

    if LOCK_PATH.exists():
        try:
            existing = int(LOCK_PATH.read_text(encoding="utf-8").strip())
        except Exception:
            existing = None

        if existing and _pid_running(existing):
            logger.error(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω –∑–∞–ø—É—â–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä (PID {existing}). –ó–∞–≤–µ—Ä—à–∞—é —Ä–∞–±–æ—Ç—É.")
            raise SystemExit(1)
        else:
            # –°—á–∏—Ç–∞–µ–º lock-—Ñ–∞–π–ª –ø—Ä–æ—Ç—É—Ö—à–∏–º
            try:
                LOCK_PATH.unlink(missing_ok=True)
            except Exception:
                pass

    try:
        LOCK_PATH.write_text(str(_LOCK_PID), encoding="utf-8")
        logger.debug(f"–°–æ–∑–¥–∞–Ω lock-—Ñ–∞–π–ª: {LOCK_PATH} (PID {_LOCK_PID})")
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å lock-—Ñ–∞–π–ª {LOCK_PATH}: {e}")
        raise SystemExit(1)


def release_single_instance_lock() -> None:
    """–£–¥–∞–ª—è–µ—Ç lock-—Ñ–∞–π–ª, –µ—Å–ª–∏ –æ–Ω –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–µ–∫—É—â–µ–º—É –ø—Ä–æ—Ü–µ—Å—Å—É."""
    try:
        if LOCK_PATH.exists():
            content = LOCK_PATH.read_text(encoding="utf-8").strip()
            if _LOCK_PID is None or content != str(_LOCK_PID):
                return
            LOCK_PATH.unlink(missing_ok=True)
            logger.debug("Lock-—Ñ–∞–π–ª —É–¥–∞–ª—ë–Ω")
    except Exception:
        # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
        pass


def _signal_handler(signum, frame):
    # –ß–∏—Å—Ç–∏–º lock –∏ –≤—ã—Ö–æ–¥–∏–º
    release_single_instance_lock()
    raise SystemExit(0)


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    from bot.utils.db import init_db, close_pool
    await init_db()

    bot = Bot(
        token=settings.bot_token,
        default=DefaultBotProperties(parse_mode=ParseMode.HTML)
    )

    dp = Dispatcher()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º middleware
    dp.message.middleware(UserMiddleware())
    dp.message.middleware(ErrorMiddleware())
    dp.callback_query.middleware(ErrorMiddleware())

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≥–ª–∞–≤–Ω—ã–π —Ä–æ—É—Ç–µ—Ä (–∫–æ—Ç–æ—Ä—ã–π —É–∂–µ –≤–∫–ª—é—á–∞–µ—Ç –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ä–æ—É—Ç–µ—Ä—ã)
    dp.include_router(router)  # –ì–ª–∞–≤–Ω—ã–π —Ä–æ—É—Ç–µ—Ä –∏–∑ bot/__init__.py —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç admin_update

    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ GPTTG –±–æ—Ç–∞ –≤–µ—Ä—Å–∏–∏ {VERSION}")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∏ –≤ —Ñ–æ–Ω–µ
    reminders_task = start_reminders_scheduler(bot)
    self_calls_task = start_self_calls_scheduler(bot)

    try:
        await dp.start_polling(bot, allowed_updates=["message", "callback_query"])
    finally:
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∏
        try:
            for t in (reminders_task, self_calls_task):
                stop_event = getattr(t, "_gpttg_stop_event", None)
                if stop_event is not None:
                    stop_event.set()
                t.cancel()
        except Exception:
            pass
        await close_session()
        await close_pool()
        await bot.session.close()


def run_bot():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –≤—Ç–æ—Ä–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞."""
    # –î–ª—è —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω–æ–≥–æ –º—É–ª—å—Ç–∏–∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Å—Ç–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º
    if ALLOW_MULTI:
        logger.warning("‚ö†Ô∏è  GPTTG_ALLOW_MULTI=1 ‚Äî –∑–∞—â–∏—Ç–∞ single-instance –æ—Ç–∫–ª—é—á–µ–Ω–∞ (dev mode)")
        asyncio.run(main())
        return

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ—á–∏—Å—Ç–∫—É lock-—Ñ–∞–π–ª–∞
    atexit.register(release_single_instance_lock)
    try:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        try:
            signal.signal(signal.SIGINT, _signal_handler)
            signal.signal(signal.SIGTERM, _signal_handler)
        except Exception:
            # –ù–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ
            pass

        acquire_single_instance_lock()
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        asyncio.run(main())
    finally:
        release_single_instance_lock()


if __name__ == "__main__":
    run_bot()
