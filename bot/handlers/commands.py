"""–ö–æ–º–∞–Ω–¥–Ω—ã–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã: /start, /help, /img, /reset, /stats, /stat, /models, /setmodel."""
from __future__ import annotations

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardRemove
import asyncio
import os
import subprocess
from pathlib import Path

from bot.config import settings, VERSION
from bot.keyboards import main_kb
from bot.utils.openai import OpenAIClient
from bot.utils.db import get_conn, get_user_display_name
from bot.utils.progress import show_progress_indicator
from bot.utils.html import send_long_html_message
from bot.utils.errors import error_handler

router = Router()


class ImgGenStates(StatesGroup):
    waiting_for_prompt = State()
    waiting_for_format = State()


# ‚Äî‚Äî‚Äî /start ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî #
@router.message(F.text == "/start")
async def cmd_start(msg: Message):
    """–°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º."""
    welcome_text = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, {msg.from_user.first_name or '–¥—Ä—É–≥'}!\n\n"
        f"–Ø ‚Äî —É–º–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–∞ –±–∞–∑–µ OpenAI Responses API. –£–º–µ—é:\n\n"
        f"üí¨ –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ questions –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –±–µ—Å–µ–¥—É\n"
        f"üñº –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–¥–ø–∏—Å—è–º–∏\n" 
        f"üé§ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
        f"üé® –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–∏ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é\n\n"
        f"–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏!"
    )
    await msg.answer(welcome_text, reply_markup=main_kb(msg.from_user.id == settings.admin_id))


# ‚Äî‚Äî‚Äî /help ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî #
@router.message(F.text == "/help")
async def cmd_help(msg: Message):
    """–í—ã–≤–æ–¥–∏—Ç –∫—Ä–∞—Ç–∫—É—é —Å–ø—Ä–∞–≤–∫—É."""
    
    help_lines = [
        "ü§ñ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>",
        "",
        "üí¨ –ü—Ä–æ—Å—Ç–æ –ø–∏—à–∏—Ç–µ –º–Ω–µ ‚Äî —è –æ—Ç–≤–µ—á—É",
        "üñº –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é ‚Äî –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é",
        "üé§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ ‚Äî —Ä–∞—Å–ø–æ–∑–Ω–∞—é –∏ –æ—Ç–≤–µ—á—É",
        "üìÑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç ‚Äî –ø—Ä–æ—á–∏—Ç–∞—é –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é",
        "",
        "<b>–ö–æ–º–∞–Ω–¥—ã:</b>",
        "/start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ",
        "/help ‚Äî —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞",
        "/img &lt;–ø—Ä–æ–º–ø—Ç&gt; ‚Äî —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É",
        "/cancel ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é",
        "/reset ‚Äî –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞",
        "/stats ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –ª–∏—á–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã",
    ]
    
    if msg.from_user.id == settings.admin_id:
        help_lines.extend([
            "",
            "<b>–ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã:</b>",
            "/stat ‚Äî –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
            "/models ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏",
            "/setmodel ‚Äî –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –º–æ–¥–µ–ª—å",
            "/status ‚Äî —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –∏ —Å–ª—É–∂–±",
            "/update ‚Äî —Ä—É—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞",
            "/checkmodel ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –º–æ–¥–µ–ª–∏"
        ])
    
    help_text = "\n".join(help_lines)
    await send_long_html_message(msg, help_text)


# ‚Äî‚Äî‚Äî /status (–∞–¥–º–∏–Ω) ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî #
@router.message(F.text == "/status")
async def cmd_status(msg: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)."""
    if msg.from_user.id != settings.admin_id:
        return

    import os
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞
    bot_dir = Path(__file__).parent.parent  # –∏–∑ bot/handlers/ –≤ bot/
    project_root = bot_dir.parent  # –∏–∑ bot/ –≤ –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    lock_file = project_root / "gpttg-bot.lock"
    lock_status = "üîí –ê–∫—Ç–∏–≤–Ω–∞" if lock_file.exists() else "üîì –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
    
    if lock_file.exists():
        try:
            with open(lock_file, 'r') as f:
                lock_pid = f.read().strip()
            lock_info = f"(PID: {lock_pid})"
            lock_status += f" {lock_info}"
        except Exception:
            lock_status += " (–¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã)"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –±–æ—Ç–∞
    process_count = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    try:
        import subprocess
        if settings.is_windows:
            result = subprocess.run(['tasklist', '/FI', 'IMAGENAME eq python*'], 
                                  capture_output=True, text=True, timeout=5)
            if result.returncode == 0:
                processes = [line for line in result.stdout.split('\n') if 'python' in line.lower()]
                process_count = len(processes)
        else:
            # Linux: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –º–µ—Ç–æ–¥
            result = subprocess.run(['pgrep', '-f', 'bot.main'], 
                                  capture_output=True, text=True, timeout=5)
            if result.returncode == 0:
                process_count = len([p for p in result.stdout.strip().split('\n') if p])
    except Exception as e:
        process_count = f"–æ—à–∏–±–∫–∞: {str(e)[:30]}..."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º systemd —Å–ª—É–∂–±—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è Linux)
    systemd_services = []
    if settings.is_linux:
        services_to_check = [
            ("gpttg-bot.service", "–û—Å–Ω–æ–≤–Ω–∞—è —Å–ª—É–∂–±–∞ –±–æ—Ç–∞"),
            ("gpttg-update.service", "–°–ª—É–∂–±–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"),
            ("gpttg-update.timer", "–¢–∞–π–º–µ—Ä –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
        ]
        
        for service_name, description in services_to_check:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–ª—É–∂–±—ã
                result = subprocess.run(
                    ['systemctl', 'is-active', service_name],
                    capture_output=True, text=True, timeout=5
                )
                
                if result.returncode == 0:
                    status = result.stdout.strip()
                    if status == "active":
                        icon = "‚úÖ"
                        status_text = "–∞–∫—Ç–∏–≤–Ω–∞"
                    elif status == "inactive":
                        icon = "‚ö´"
                        status_text = "–Ω–µ–∞–∫—Ç–∏–≤–Ω–∞"
                    elif status == "failed":
                        icon = "‚ùå"
                        status_text = "—Å–±–æ–π"
                    else:
                        icon = "‚ö†Ô∏è"
                        status_text = status
                else:
                    icon = "‚ùì"
                    status_text = "–Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
                
                # –î–ª—è timer —Ç–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º enabled —Å—Ç–∞—Ç—É—Å
                if service_name.endswith('.timer'):
                    try:
                        enabled_result = subprocess.run(
                            ['systemctl', 'is-enabled', service_name],
                            capture_output=True, text=True, timeout=3
                        )
                        if enabled_result.returncode == 0:
                            enabled_status = enabled_result.stdout.strip()
                            if enabled_status == "enabled":
                                status_text += " (–≤–∫–ª—é—á–µ–Ω)"
                            else:
                                status_text += f" ({enabled_status})"
                    except Exception:
                        pass
                
                systemd_services.append(f"{icon} {service_name}: {status_text}")
                
            except subprocess.TimeoutExpired:
                systemd_services.append(f"‚è≥ {service_name}: –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–≤—ã—Å–∏–ª–∞ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è")
            except Exception as e:
                systemd_services.append(f"‚ùì {service_name}: –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ñ–∞–π–ª—ã
    version_files = []
    
    # –§–∞–π–ª—ã –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞
    root_files = [".env", "update_bot.sh"]
    for file_name in root_files:
        file_path = project_root / file_name
        if file_path.exists():
            try:
                size = file_path.stat().st_size
                version_files.append(f"‚úÖ {file_name} ({size} –±–∞–π—Ç)")
            except Exception:
                version_files.append(f"‚ö†Ô∏è {file_name} (–æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è)")
        else:
            version_files.append(f"‚ùå {file_name} (–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç)")
    
    # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
    db_file = bot_dir / "bot.sqlite"
    if db_file.exists():
        try:
            size = db_file.stat().st_size
            version_files.append(f"‚úÖ bot.sqlite ({size} –±–∞–π—Ç)")
        except Exception:
            version_files.append(f"‚ö†Ô∏è bot.sqlite (–æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è)")
    else:
        version_files.append(f"‚ùå bot.sqlite (–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç)")
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ
    platform_info = f"{settings.platform} ({'dev' if settings.is_development else 'prod'})"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å
    status_text = (
        f"üîß <b>–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:</b>\n\n"
        f"üìã –í–µ—Ä—Å–∏—è –±–æ—Ç–∞: <code>{VERSION}</code>\n"
        f"üñ•Ô∏è –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: <code>{platform_info}</code>\n"
        f"üîí –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞: {lock_status}\n"
        f"‚öôÔ∏è –ü—Ä–æ—Ü–µ—Å—Å–æ–≤ bot.main: <code>{str(process_count)}</code>\n\n"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ systemd —Å–ª—É–∂–±–∞—Ö
    if systemd_services:
        status_text += f"üîß <b>–°–∏—Å—Ç–µ–º–Ω—ã–µ —Å–ª—É–∂–±—ã:</b>\n"
        for service_info in systemd_services:
            status_text += f"  {service_info}\n"
        status_text += "\n"
    
    status_text += f"üíæ <b>–°–∏—Å—Ç–µ–º–Ω—ã–µ —Ñ–∞–π–ª—ã:</b>\n"
    for file_info in version_files:
        status_text += f"  {file_info}\n"
    
    await send_long_html_message(msg, status_text)


# ‚Äî‚Äî‚Äî /models (–∞–¥–º–∏–Ω) ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî #
@router.message(F.text == "/models")
@error_handler("models_command")
async def cmd_models(msg: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)."""
    if msg.from_user.id != settings.admin_id:
        return

    current_model = await OpenAIClient.get_current_model()
    models = await OpenAIClient.get_available_models()
    
    models_text = f"ü§ñ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ vision-–º–æ–¥–µ–ª–∏:</b>\n\n"
    models_text += f"üî∏ <b>–¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å:</b> <code>{current_model}</code>\n\n"
    
    for model in models[:8]:
        status = "‚úÖ" if model['id'] == current_model else "‚ö™"
        models_text += f"{status} <code>{model['id']}</code>\n"
    
    models_text += f"\nüí° <i>–í—Å–µ –º–æ–¥–µ–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç —Ç–µ–∫—Å—Ç –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</i>"
    models_text += f"\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /setmodel –¥–ª—è —Å–º–µ–Ω—ã –º–æ–¥–µ–ª–∏"
    
    await send_long_html_message(msg, models_text)
        

# ‚Äî‚Äî‚Äî /setmodel (–∞–¥–º–∏–Ω) ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî #
@router.message(F.text == "/setmodel")
@error_handler("setmodel_command")
async def cmd_setmodel(msg: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)."""
    if msg.from_user.id != settings.admin_id:
        return

    current_model = await OpenAIClient.get_current_model()
    models = await OpenAIClient.get_available_models()
    
    # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = InlineKeyboardMarkup(inline_keyboard=[])
    
    for model in models[:8]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 8 –º–æ–¥–µ–ª–µ–π
        status = "‚úÖ " if model['id'] == current_model else ""
        keyboard.inline_keyboard.append([
            InlineKeyboardButton(
                text=f"{status}{model['id']}",
                callback_data=f"setmodel:{model['id']}"
            )
        ])
    
    await msg.answer(
        f"ü§ñ <b>–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:</b>\n\n–¢–µ–∫—É—â–∞—è: <code>{current_model}</code>",
        reply_markup=keyboard
    )


# ‚Äî‚Äî‚Äî Callback –¥–ª—è —Å–º–µ–Ω—ã –º–æ–¥–µ–ª–∏ ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî #
@router.callback_query(F.data.startswith("setmodel:"))
@error_handler("setmodel_callback")
async def callback_setmodel(callback: CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ —á–µ—Ä–µ–∑ inline –∫–Ω–æ–ø–∫—É."""
    if callback.from_user.id != settings.admin_id:
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return

    model_id = callback.data.split(":", 1)[1]
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—É—é –º–æ–¥–µ–ª—å
    await OpenAIClient.set_current_model(model_id)
    
    await callback.message.edit_text(
        f"‚úÖ <b>–ú–æ–¥–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞!</b>\n\n–¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: <code>{model_id}</code>\n\n"
        f"–í—Å–µ –Ω–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –º–æ–¥–µ–ª—å."
    )
    
    await callback.answer("‚úÖ –ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞!")


# ‚Äî‚Äî‚Äî /reset ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî #
@router.message(F.text.startswith("/reset"))
async def cmd_reset(msg: Message, state: FSMContext):
    """–£–¥–∞–ª—è–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π previous_response_id –∏ –≤—Å–µ —Ñ–∞–π–ª—ã OpenAI –¥–ª—è —á–∞—Ç–∞."""
    # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã –∏–∑ OpenAI –∏ –ë–î
    await OpenAIClient.delete_files_by_chat(msg.chat.id)
    # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
    async with get_conn() as db:
        await db.execute(
            "DELETE FROM chat_history WHERE chat_id = ?",
            (msg.chat.id,)
        )
        await db.commit()
    await msg.answer("üóë –ò—Å—Ç–æ—Ä–∏—è –∏ —Ñ–∞–π–ª—ã –æ—á–∏—â–µ–Ω—ã! –°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—Ä–æ—Å –Ω–∞—á–Ω–µ—Ç –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥.", 
                    reply_markup=main_kb(msg.from_user.id == settings.admin_id))


# ‚Äî‚Äî‚Äî /stats ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî #
@router.message(F.text.startswith("/stats"))
async def cmd_stats(msg: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞—Å—Ö–æ–¥—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    
    async with get_conn() as db:
        # –û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã
        cur = await db.execute(
            "SELECT COALESCE(SUM(cost),0) FROM usage WHERE user_id = ?",
            (msg.from_user.id,),
        )
        (total,) = await cur.fetchone()
        
        # –†–∞–∑–±–∏–≤–∫–∞ –ø–æ –º–æ–¥–µ–ª—è–º
        cur = await db.execute(
            """SELECT model, COUNT(*) as requests, COALESCE(SUM(cost),0) as model_cost 
               FROM usage WHERE user_id = ? GROUP BY model ORDER BY model_cost DESC""",
            (msg.from_user.id,)
        )
        models = await cur.fetchall()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats_text = f"üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n\n–û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã: <code>${total:.4f}</code>\n\n"
    
    if models:
        stats_text += "<b>–ü–æ –º–æ–¥–µ–ª—è–º:</b>\n"
        for model, requests, cost in models:
            stats_text += f"‚Ä¢ <code>{model}</code>: {requests} –∑–∞–ø—Ä–æ—Å–æ–≤ ‚Äî <code>${cost:.4f}</code>\n"
    else:
        stats_text += "–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏."
    
    await send_long_html_message(msg, stats_text)


# ‚Äî‚Äî‚Äî /stat (–∞–¥–º–∏–Ω) ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî #
@router.message(F.text.startswith("/stat"))
async def cmd_stat(msg: Message):
    """–ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    if msg.from_user.id != settings.admin_id:
        return

    async with get_conn() as db:
        current_model = await OpenAIClient.get_current_model()
        
        (day_total,) = await (await db.execute(
            "SELECT COALESCE(SUM(cost),0) FROM usage WHERE ts >= DATETIME('now','-1 day')",
        )).fetchone()

        (week_total,) = await (await db.execute(
            "SELECT COALESCE(SUM(cost),0) FROM usage WHERE ts >= DATETIME('now','-7 day')",
        )).fetchone()

        (month_total,) = await (await db.execute(
            "SELECT COALESCE(SUM(cost),0) FROM usage WHERE ts >= DATETIME('now','-1 month')",
        )).fetchone()

        rows = await (await db.execute(
            "SELECT user_id, SUM(cost) AS c FROM usage GROUP BY user_id ORDER BY c DESC LIMIT 10",
        )).fetchall()

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–æ–ø —Å –∏–º–µ–Ω–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    leaderboard_lines = []
    for user_id, cost in rows:
        display_name = await get_user_display_name(user_id)
        leaderboard_lines.append(f"‚Ä¢ {display_name} ‚Äî <code>${cost:.4f}</code>")
    
    leaderboard = "\n".join(leaderboard_lines) or "‚Äî"

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stat_text = (
        f"üìà <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n\n"
        f"ü§ñ –¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: <code>{current_model}</code>\n\n"
        f"üìÖ –ó–∞ —Å—É—Ç–∫–∏: <code>${day_total:.4f}</code>\n"
        f"üìÖ –ó–∞ –Ω–µ–¥–µ–ª—é: <code>${week_total:.4f}</code>\n"
        f"üìÖ –ó–∞ –º–µ—Å—è—Ü: <code>${month_total:.4f}</code>\n\n"
        f"üèÜ <b>–¢–æ–ø-10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n{leaderboard}"
    )
    
    await send_long_html_message(msg, stat_text)


# ‚Äî‚Äî‚Äî /img ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî #
@router.message(F.text == "/img")
async def cmd_img(msg: Message, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏."""
    await msg.answer(
        "üé® <b>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</b>\n\n"
        "–û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –Ω–∞—Ä–∏—Å–æ–≤–∞—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–ö–æ—Ç –≤ –∫–æ—Å–º–æ—Å–µ', '–ì–æ—Ä—ã –Ω–∞ –∑–∞–∫–∞—Ç–µ', ...).\n\n"
        "üí° –î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ: <code>/cancel</code> –∏–ª–∏ <code>–æ—Ç–º–µ–Ω–∞</code>",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(ImgGenStates.waiting_for_prompt)


@router.message(ImgGenStates.waiting_for_prompt)
async def imggen_get_prompt(msg: Message, state: FSMContext):
    """–ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–º–ø—Ç, —Å–ø—Ä–∞—à–∏–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç."""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã –æ—Ç–º–µ–Ω—ã
    if msg.text and msg.text.lower() in ['/cancel', '/–æ—Ç–º–µ–Ω–∞', '–æ—Ç–º–µ–Ω–∞', 'cancel']:
        await msg.answer("‚ùå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", 
                        reply_markup=main_kb(msg.from_user.id == settings.admin_id))
        await state.clear()
        return
    
    await state.update_data(prompt=msg.text)
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π (1024x1792)", callback_data="img_fmt_vert")],
            [InlineKeyboardButton(text="–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π (1792x1024)", callback_data="img_fmt_horiz")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="img_cancel")]
        ]
    )
    await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:", reply_markup=kb)
    await state.set_state(ImgGenStates.waiting_for_format)


@router.callback_query(ImgGenStates.waiting_for_format)
@error_handler("img_generation")
async def imggen_get_format(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ä–º–∞—Ç, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É."""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –æ—Ç–º–µ–Ω—É
    if callback.data == "img_cancel":
        await callback.answer("‚ùå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
        await callback.message.edit_text("‚ùå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        await state.clear()
        return
    
    data = await state.get_data()
    prompt = data.get("prompt") or "–°–º–µ—à–Ω–æ–π –∫–æ—Ç"
    if callback.data == "img_fmt_vert":
        size = "1024x1792"
    else:
        size = "1792x1024"
    # –°—Ä–∞–∑—É –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã Telegram –Ω–µ –≤—ã–¥–∞–ª –æ—à–∏–±–∫—É
    await callback.answer()
    progress_task = None
    try:
        progress_task = asyncio.create_task(
            show_progress_indicator(callback.bot, callback.message.chat.id, max_time=60)
        )
        url = await OpenAIClient.dalle(prompt, size, callback.message.chat.id, callback.from_user.id)
        if not url:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
        await callback.message.answer_photo(url, caption=f"üñº {prompt}")
    finally:
        if progress_task and not progress_task.done():
            progress_task.cancel()
    await state.clear()


# ‚Äî‚Äî‚Äî /cancel (–≥–ª–æ–±–∞–ª—å–Ω–∞—è –æ—Ç–º–µ–Ω–∞) ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî #
@router.message(F.text.in_(["/cancel", "/–æ—Ç–º–µ–Ω–∞"]))
async def cmd_cancel(msg: Message, state: FSMContext):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –æ—Ç–º–µ–Ω—ã –¥–ª—è –ª—é–±–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM."""
    current_state = await state.get_state()
    
    if current_state is None:
        await msg.answer("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã.", 
                        reply_markup=main_kb(msg.from_user.id == settings.admin_id))
        return
    
    await state.clear()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞
    if current_state in ["ImgGenStates:waiting_for_prompt", "ImgGenStates:waiting_for_format"]:
        operation = "–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"
    else:
        operation = "—Ç–µ–∫—É—â–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è"
    
    await msg.answer(f"‚ùå {operation.capitalize()} –æ—Ç–º–µ–Ω–µ–Ω–∞.", 
                    reply_markup=main_kb(msg.from_user.id == settings.admin_id))


# ‚Äî‚Äî‚Äî /checkmodel (–∞–¥–º–∏–Ω) ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî #
@router.message(F.text == "/checkmodel")
@error_handler("checkmodel_command")
async def cmd_checkmodel(msg: Message):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–µ–∫—É—â—É—é –º–æ–¥–µ–ª—å (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)."""
    if msg.from_user.id != settings.admin_id:
        return

    from bot.utils.openai.models import ModelsManager
    
    current_model = await ModelsManager.get_current_model()
    is_vision = current_model in ModelsManager.VISION_MODELS
    
    status_icon = "‚úÖ" if is_vision else "‚ùå"
    status_text = "vision-–º–æ–¥–µ–ª—å" if is_vision else "–Ω–µ vision-–º–æ–¥–µ–ª—å"
    
    response_text = (
        f"üîç <b>–¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å:</b> <code>{current_model}</code>\n"
        f"{status_icon} –°—Ç–∞—Ç—É—Å: <b>{status_text}</b>\n\n"
        f"<b>–î–µ–π—Å—Ç–≤–∏—è:</b>\n"
        f"‚Ä¢ /models ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏\n"
        f"‚Ä¢ /setmodel ‚Äî —Å–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å"
    )
    
    if not is_vision:
        response_text += f"\n\n‚ö° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:</b> –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ—Å—å –Ω–∞ vision-–º–æ–¥–µ–ª—å"
    
    await send_long_html_message(msg, response_text)