"""–ê–¥–º–∏–Ω—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞."""
import asyncio
import subprocess
from pathlib import Path
from aiogram import Router, F, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from bot.config import settings
from bot.utils.log import logger
from bot.utils.version_checker import update_checker

router = Router(name="admin_update")


@router.message(F.text.casefold() == "/update")
async def cmd_update(message: types.Message):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: –ø—Ä–æ–≤–µ—Ä–∫–∞ + –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)."""
    if message.from_user.id != settings.admin_id:
        return  # –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã—Ö
    
    await message.answer("üîç –ü—Ä–æ–≤–µ—Ä—è—é –Ω–∞–ª–∏—á–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        update_info = await update_checker.check_updates_available()
        
        if update_info.get("error"):
            await message.answer(
                f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π:</b>\n"
                f"<code>{update_info['error']}</code>",
                parse_mode="HTML"
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        info_text = update_checker.format_update_info(update_info)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∫–æ–º–º–∏—Ç–∞—Ö
        if update_info.get("available"):
            # –ï—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ–±–Ω–æ–≤–∏—Ç—å—Å—è
            recent_commits = await update_checker.get_recent_commits(count=3)
            if recent_commits:
                info_text += "\n\nüìù <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:</b>\n"
                for commit in recent_commits:
                    info_text += f"‚Ä¢ <code>{commit['hash']}</code> {commit['message']}\n"
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –û–±–Ω–æ–≤–∏—Ç—å —Å–µ–π—á–∞—Å", callback_data="update_confirm")],
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="update_cancel")]
            ])
            
            await message.answer(info_text, parse_mode="HTML", reply_markup=keyboard)
            
        else:
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
            recent_commits = await update_checker.get_recent_commits(count=5)
            if recent_commits:
                info_text += "\n\nüìù <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∫–æ–º–º–∏—Ç—ã –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏:</b>\n"
                for commit in recent_commits[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ 3 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö
                    info_text += f"‚Ä¢ <code>{commit['hash']}</code> {commit['message']}\n"
                    info_text += f"  <i>by {commit['author']}, {commit['date']}</i>\n"
            
            await message.answer(info_text, parse_mode="HTML")
        
    except Exception as e:
        await message.answer(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {str(e)[:200]}")
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {e}")


@router.callback_query(F.data == "update_confirm")
async def callback_update_confirm(callback: types.CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è."""
    if callback.from_user.id != settings.admin_id:
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return
    
    await callback.answer()
    await callback.message.edit_text("‚öôÔ∏è –ó–∞–ø—É—Å–∫–∞—é –ø—Ä–æ—Ü–µ—Å—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...")
    
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ —Å–∫—Ä–∏–ø—Ç—É –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–µ–∫—Ç–∞
        project_root = Path(__file__).parent.parent.parent
        update_script = project_root / "update_bot.sh"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞
        if not update_script.exists():
            await callback.message.edit_text("‚ùå –°–∫—Ä–∏–ø—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        proc = await asyncio.create_subprocess_exec(
            "sudo", "bash", str(update_script), "--no-restart",
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.STDOUT,
            cwd=str(project_root)
        )
        
        stdout, _ = await proc.communicate()
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if proc.returncode == 0:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 1500 —Å–∏–º–≤–æ–ª–æ–≤ –≤—ã–≤–æ–¥–∞
            output = stdout.decode(errors="ignore")
            snippet = output[-1500:] if output else "(–≤—ã–≤–æ–¥ –ø—É—Å—Ç)"
            
            await callback.message.edit_text(
                f"‚úÖ <b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!</b>\n\n"
                f"<pre>{snippet}</pre>",
                parse_mode="HTML"
            )
            logger.info("–†—É—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ /update –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
        else:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
            error_output = stdout.decode(errors="ignore")
            error_snippet = error_output[-1000:] if error_output else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
            
            await callback.message.edit_text(
                f"‚ùå <b>–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:</b>\n\n"
                f"<pre>{error_snippet}</pre>",
                parse_mode="HTML"
            )
            logger.error(f"–û—à–∏–±–∫–∞ —Ä—É—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {proc.returncode}")
            
    except Exception as e:
        await callback.message.edit_text(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {str(e)[:200]}")
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä—É—á–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {e}")


@router.callback_query(F.data == "update_cancel")
async def callback_update_cancel(callback: types.CallbackQuery):
    """–û—Ç–º–µ–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è."""
    if callback.from_user.id != settings.admin_id:
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return
    
    await callback.answer()
    await callback.message.edit_text("‚ùå –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")