"""–ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è ‚Üí Whisper ‚Üí —Ç–µ–∫—Å—Ç ‚Üí –º–æ–¥–µ–ª—å."""
from aiogram import Router
from aiogram.types import Message
import asyncio
from bot.config import settings
from bot.utils.openai import OpenAIClient
from bot.utils.http_client import download_file
from bot.utils.progress import show_progress_indicator
from bot.utils.errors import error_handler
from bot.utils.datetime_context import enhance_content_dict_with_datetime
import io

router = Router()

@router.message(lambda m: m.voice)
@error_handler("voice_handler")
async def handle_voice(msg: Message):
    v = msg.voice
    if v.file_size > settings.max_file_mb * 1024 * 1024:
        await msg.reply(f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (>{settings.max_file_mb} –ú–ë)")
        return

    file = await msg.bot.get_file(v.file_id)
    url = f"https://api.telegram.org/file/bot{settings.bot_token}/{file.file_path}"

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    progress_task = asyncio.create_task(
        show_progress_indicator(msg.bot, msg.chat.id)
    )
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
        data = await download_file(url)
        
        audio_file = io.BytesIO(data)
        audio_file.name = "voice.ogg"

        # –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ Whisper
        text = await OpenAIClient.whisper(audio_file, msg.chat.id, msg.from_user.id)
        
        if not text.strip():
            await msg.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏")
            return

        await msg.answer(f"üó£ –í—ã —Å–∫–∞–∑–∞–ª–∏: {text}")

        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏
        content = [{"type": "message", "role": "user", "content": text}]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
        content[0] = enhance_content_dict_with_datetime(content[0])
        
        response_text = await OpenAIClient.responses_request(msg.chat.id, content)
        await msg.answer(response_text)

    finally:
        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –æ—Ç–º–µ–Ω—è–µ–º –∑–∞–¥–∞—á—É –∏–Ω–¥–∏–∫–∞—Ü–∏–∏
        if progress_task and not progress_task.done():
            progress_task.cancel()